#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#            This file is part of the DpdGraph tools.
#  Copyright (C) 2009-2013 Anne Pacalet (Anne.Pacalet@free.fr)
#                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#      This file is distributed under the terms of the 
#       GNU Lesser General Public License Version 2.1
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* WHAT IS IT :
#-------------

First of all, it is a small tool (an extended COQ toplevel) that extracts the
dependencies between COQ objects, and produce a file (.dpd) with this 
information.
Then, another tool reads these .dpd files and produce graph file
using .dot format (cf. http://www.graphviz.org/) that makes possible to view
them.
The idea is that other small tools can be developed latter on to process
the .dpd files.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* COMPILATION :
#--------------

Should produce 2 executables :
- ./coqthmdep : an extended coqtop to be able to build .dpd files.
- ./dpd2dot : a tool to transform .dpd files into .dot graphs.

~~ Requirements :

=> to be able to build a coqtop (I don't know exactly what is needed...)
   (at least ocaml, calmp5, libcoq-ocaml-dev, ... ?)
   Version 0.4alpha has been compiled with Coq 8.4pl2 (January 2014)
                                      compiled with OCaml 4.00.1
                    BUT it is NOT WORKING ! This is an on going work.
   Version 0.3 has been tested with Coq 8.3pl4 (April 2012)
   Version 0.2 has been tested with Coq 8.2 (February 2009)

=> ocamlgraph (for dpd2dot tool)

~~ Compile :

$ make

... and complain to me because it doesn't work... ;-)

~~ Tests

$ make -s test

to check if everything is ok.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* HOW TO USE IT :
#----------------

~~ Requirements :

=> to have compiled the tools (see above)

=> a compiled COQ file.
   You can for instance use tests/Test.v (a modified clone of COQ List.v)
   and compile it doing :
   $ coqc tests/Test.v


~~ Generation of .dpd files :

The available commands are :
--> Print FileDependGraph <module name list>.
   A module can be a file, or a sub-module in a file.
   Example :  Print FileDependGraph M M2.A.B.
   Take all the objects the specified modules and build the dependencies 
   between them.
--> Print DependGraph my_lemma.
  Analyse recursively the dependencies of 'my_lemma'.
--> Set DependGraph File "f.dpd".
  To change the name of the generated file (default is graph.dpd).
  Useful when one needs to build several files in one session.

Advice :
--> you need to use Require to load the module that you want to explore, 
    but don't use any Import/Export command because the tool is then unable
    to properly group the nodes by modules.

Example :

$ ledit ./coqthmdep -I tests/
Welcome to Coq 8.2 (February 2009)
Coq < Require Test.
Coq < Print FileDependGraph Test.
Info: Graph output in graph.dpd
Coq < Set DependGraph File "graph2.dpd".
Coq < Print DependGraph Test.Permutation_app_swap.
Info: Graph output in graph2.dpd
^D

~~ From a .dpd file to a .dot file

$ ./dpd2dot graph.dpd
Info: read file graph.dpd
Info: Graph output in graph.dot

There are some options :
$ ./dpd2dot -help
Usage : ./dpd2dot [options]
  -o : name of output file (default: name of input file .dot)
  -with-defs : show everything (default)
  -without-defs : show only Prop objects
  -rm-trans : remove transitive dependencies (default)
  -keep-trans : keep transitive dependencies
  -debug : set debug mode
  -help  Display this list of options
  --help  Display this list of options

The only useful option at the moment is -without-defs that export only
Prop objects to the graph (Axiom, Theorem, Lemma, etc).

~~ Graph visualisation and interpretation :

You need :

=> graphviz (ie. dot tool)
=> a visualizer :
  Personally, I use zgrviewer (http://zvtm.sourceforge.net/zgrviewer.html)
  $ zgrviewer file.dot
  but there are others.

  You can also convert .dot file to .svg file using :
  $ dot -Tsvg file.dot > file.svg
  and use firefox or inskape to view the .svg graph.

The main advantage of using [firefox] is that the nodes are linked to
the [coqdoc] pages if they have been generated in the same directory.
But the navigation (zoom, moves) is very poor and slow.

~~ Graph interpretation :

The graph can be interpreted like this :
- edge n1 --> n2 : n1 uses n2
- node :
  - green : proved lemma
  - orange :  axiom/admitted lemma 
  - dark pink : Definition, etc
  - light pink : Parameter, etc
  - violet : inductive,
  - blue : constructor,
  - multi-circled : not used (no predecessor in the graph)
- yellow box : module
- objects that are not in a yellow box are COQ objects.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* TODO/BUGS :
#------------

You may report bugs or even feature requests to Anne.Pacalet@free.fr
and see what happen... ;-)

Some known bugs and feature requests are listed here :

#-----------------
~~ COQ part :

- add dependencies on objects used in object type.
  Example :
  Parameter size : list -> nat.
  Axiom size_nil : size nil = 0.
  [size_nil] should depend on [size].

- dependencies on [Parametric Morphism] are not detected...
  Well, this is not really true, but links seems to be in the wrong way
  (see tests/Morph.v)

- add an option to limit the recursive search to a given level.

- also use Section to organize the graph.

~~ translation to .dot

~~ other tools

- try to export .dpd to sqlite database and use firefox extension 

~~ visalisation 

- use  ocamlgraph/viewgraph in order to be able to add actions on nodes

- interactive visualisation ?...

~~ General :

#-----------------
~~ Fixed :

[07/08/2009] fixed bug : requests on internal COQ modules don't work...

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# CHANGELOG :
#------------

[24/04/2013] Version 0.3 :
             Adaptation for Coq 8.3 + better Makefile (thanks to Julien Narboux)
[18/09/2009] Add licence and distribute as version 0.2.
[07/08/2009] Arguments for FileDependGraph don't need "" anymore
             + module names checking and 'globalisation'
             (Patch from Hugo Herbelin)
[24/07/2009] Add attributes on edges
[24/07/2009] Count the number of time an object is used by another one
[24/07/2009] Hierarchical subgraphs
[24/07/2009] Add URL to coqdoc in .dot nodes for .svg export
[24/07/2009] Tests management in Makefile
[23/07/2009] Better handling of special characters in names and identification
[23/07/2009] Identification of dot graph nodes by their full COQ names
             instead of a number.
[23/07/2009] First locally distributed version.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# DEVELOPMENT INFORMATION :
#--------------------------

- generated .dpd format description :

graph : obj_list
obj : node | edge

node : "N: " node_id node_name '[' node_attribute_list ']' ';'
node_id : [0-9]+
node_name : '"' string '"'
node_attribute_list :
   | empty
   | node_attribute ',' node_attribute_list
node_attribute :
   | kind=[cnst|inductive|construct]
   | prop=[yes|no]
   | path="m0.m1.m2"
   | body=[yes|no]

edge : "E: "  node_id node_id '[' edge_attribute_list ']' ';'
edge_attribute_list :
   | empty
   | edge_attribute ',' edge_attribute_list
edge_attribute :
   | weight=NUM


- The parser accept .dpd files as described above,
  but also any attribute for nodes and edges having the form :
  prop=val or prop="string..." or prop=NUM
  so that the generated .dpd can have new attributes without having to change
  the other tools.
  Each tool can then pick the attributes that it is able to handle;
  they are not supposed to raise an error whenever there is 
  an unknown attribute.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# HISTORY :
#----------

These tools are based on the function [SearchDepend] that Yves Bertot posted
on [Coq-Club] at on the February 27th, 2009.

I first tried to generate a graph directly from COQ, but it becomes rapidly huge
and difficult to use. It appears that we need a tool to be able to filter what
we really want to see.  
So finally, I have made a simple file generation from coq to export every useful
information. The idea is to have external tools to read the information file and
generate whatever we want.  I think it will be easier to maintain and extend.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
